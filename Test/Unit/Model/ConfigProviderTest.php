<?php
/**
 * Copyright Â© Resurs Bank AB. All rights reserved.
 * See LICENSE for license details.
 */

declare(strict_types=1);

namespace Resursbank\Simplified\Test\Unit\Model;

use JsonException;
use Magento\Framework\Exception\ValidatorException;
use Magento\Framework\TestFramework\Unit\Helper\ObjectManager;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;
use ReflectionException;
use ReflectionMethod;
use ReflectionObject;
use Resursbank\Core\Api\Data\PaymentMethodInterface;
use Resursbank\Core\Helper\PaymentMethods;
use Resursbank\Core\Model\PaymentMethod;
use Resursbank\Simplified\Model\ConfigProvider;

class ConfigProviderTest extends TestCase
{
    /**
     * @var ObjectManager
     */
    private $objectManager;

    /**
     * @var ConfigProvider
     */
    private $configProvider;

    /**
     * @var MockObject
     */
    private $helper;

    /**
     * @inheritDoc
     */
    protected function setUp(): void
    {
        $this->objectManager = new ObjectManager($this);

        $this->helper = $this->getMockBuilder(PaymentMethods::class)
            ->disableOriginalConstructor()
            ->onlyMethods(['getMethodsByCredentials'])
            ->getMock();

        /** @phpstan-ignore-next-line */
        $this->configProvider = $this->objectManager
            ->getObject(ConfigProvider::class, ['helper' => $this->helper]);
    }

    /**
     * Assert that mapPaymentMethod works when provided with an object instance
     * containing raw data.
     *
     * @return void
     * @throws JsonException
     * @throws ReflectionException
     */
    public function testMapPaymentMethodWithRawData(): void
    {
        $raw = ['type' => 'card', 'specificType' => 'visa'];
        $expected = [
            'code' => 'invoice',
            'title' => 'Faktura',
            'maxOrderTotal' => 505.12
        ];

        /** @var PaymentMethodInterface $method */
        $method = $this->objectManager->getObject(PaymentMethod::class);

        $method->setCode($expected['code'])
            ->setTitle($expected['title'])
            ->setMaxOrderTotal($expected['maxOrderTotal'])
            ->setRaw(json_encode($raw, JSON_THROW_ON_ERROR));

        $actual = $this->getMapPaymentMethodMethod()->invoke(
            $this->configProvider,
            $method
        );

        static::assertSame(array_merge($expected, $raw), $actual);
    }

    /**
     * Assert that mapPaymentMethod works when provided with an object instance
     * without raw data.
     *
     * @return void
     * @throws ReflectionException
     */
    public function testMapPaymentMethodWithoutRawData(): void
    {
        $expected = [
            'code' => 'partpayment_nisse_1',
            'title' => 'Great partpayment',
            'maxOrderTotal' => 34534.00,
            'type' => '',
            'specificType' => ''
        ];

        /** @var PaymentMethodInterface $method */
        $method = $this->objectManager->getObject(PaymentMethod::class);

        $method->setCode($expected['code'])
            ->setTitle($expected['title'])
            ->setMaxOrderTotal($expected['maxOrderTotal']);

        $actual = $this->getMapPaymentMethodMethod()->invoke(
            $this->configProvider,
            $method
        );

        static::assertSame($expected, $actual);
    }

    /**
     * Assert that mapPaymentMethod throws and instance of JsonException when
     * provided with an object instance containing corrupt raw data.
     *
     * @return void
     * @throws ReflectionException
     */
    public function testMapPaymentMethodThrowsWithCorruptRawData(): void
    {
        $this->expectException(JsonException::class);

        $data = [
            'code' => 'some_method',
            'title' => 'Some method',
            'maxOrderTotal' => 4664.00,
            'type' => '',
            'specificType' => ''
        ];

        /** @var PaymentMethodInterface $method */
        $method = $this->objectManager->getObject(PaymentMethod::class);

        $method->setCode($data['code'])
            ->setTitle($data['title'])
            ->setMaxOrderTotal($data['maxOrderTotal'])
            ->setRaw('that does not take wooden nickels');

        $this->getMapPaymentMethodMethod()->invoke(
            $this->configProvider,
            $method
        );
    }

    /**
     * Test that the getConfig method converted PaymentMethod model instances
     * to an anonymous array.
     *
     * @throws JsonException
     * @throws ValidatorException
     */
    public function testGetConfigResult(): void
    {
        // Data which should be generated by the getConfig method.
        $data = [
            [
                'code' => 'partpayment',
                'title' => 'Delbetalning',
                'maxOrderTotal' => 543.00,
                'type' => '',
                'specificType' => ''
            ],
            [
                'code' => 'some_method_12314',
                'title' => 'Some method',
                'maxOrderTotal' => 6054.20,
                'type' => 'resursCard',
                'specificType' => 'internal'
            ]
        ];

        $expected = [
            'payment' => [
                'resursbank_simplified' => [
                    'methods' => $data
                ]
            ]
        ];

        // Create mocked PaymentMethod model instances, utilising $data.
        /** @var PaymentMethod $method1 */
        $method1 = $this->objectManager->getObject(PaymentMethod::class);
        $method1->setData($data[0])
            ->setMaxOrderTotal($data[0]['maxOrderTotal']);

        /** @var PaymentMethod $method2 */
        $method2 = $this->objectManager->getObject(PaymentMethod::class);
        $method2->setData($data[1])
            ->setMaxOrderTotal($data[1]['maxOrderTotal'])
            ->setRaw(json_encode(
                ['type' => 'resursCard', 'specificType' => 'internal'],
                JSON_THROW_ON_ERROR
            ));

        // Mock response from method that collects payment methods from DB.
        $this->helper
            ->expects(static::once())
            ->method('getMethodsByCredentials')
            ->willReturn([$method1, $method2]);

        // Assert the value returned by getConfig matches out expectation.
        static::assertSame($expected, $this->configProvider->getConfig());
    }

    /**
     * Retrieve accessible mapPaymentMethod method mock.
     *
     * @return ReflectionMethod
     */
    private function getMapPaymentMethodMethod(): ReflectionMethod
    {
        $obj = new ReflectionObject($this->configProvider);
        $method = $obj->getMethod('mapPaymentMethod');
        $method->setAccessible(true);

        return $method;
    }
}
